#!/usr/bin/env bds


include "print.bds"
include "getmem.bds"

string[] featurecounts(string sample, int paired, string tmpdir, string infile, string outfile, string outdir, string logfile, string logdir, string softwareConfig, string refConfig) {

	// initialize
	string{} swParam = config(softwareConfig)
	string{} refParam = config(refConfig)
	string[] modlist
	string modname = "RNAseq::featurecounts"
	string exe
	string modsource
	string modload = ""
	int threads = 1
	int memory = 1
	int modFlag = 0

	string[] tids
	string tid
	string[] infiles = infile.split(",")
	string inputString
	string paramString = ''
	string refGenome
	string annoGtf
	string annoFormat = 'GTF'
	string annoFeature = 'exon'
	string annoAttribute = 'gene_id'
	int infileTotal
	int rnaseqLibStrand = 0
	int minMapQual = 0
	int countJunctionFlag = 0
	int countPrimaryFlag = 0
	int countProperpairFlag = 0
	int pairedEndFragmentFlag = 0


	// assign values
	if(swParam.hasKey("main_module_source")) { modsource = swParam{"main_module_source"} }
	if(swParam.hasKey("main_use_module")) { modFlag = swParam{"main_use_module"}.parseInt() }
	if(swParam.hasKey("featurecounts_exe")) { exe = swParam{"featurecounts_exe"} }
	if(swParam.hasKey("featurecounts_module")) { modlist.push(swParam{"featurecounts_module"}) }
	if(swParam.hasKey("featurecounts_threads")) { threads = swParam{"featurecounts_threads"}.parseInt() }
	if(swParam.hasKey("featurecounts_mem")) { memory = swParam{"featurecounts_mem"}.parseInt() }
	if(swParam.hasKey("featurecounts_anno_format")) { annoFormat = swParam{"featurecounts_anno_format"} }
	if(swParam.hasKey("featurecounts_anno_feature")) { annoFeature = swParam{"featurecounts_anno_feature"} }
	if(swParam.hasKey("featurecounts_anno_attribute")) { annoAttribute = swParam{"featurecounts_anno_attribute"} }
	if(swParam.hasKey("featurecounts_rnaseq_lib_strand")) { rnaseqLibStrand = swParam{"featurecounts_rnaseq_lib_strand"}.parseInt() }
	if(swParam.hasKey("featurecounts_min_map_qual")) { minMapQual = swParam{"featurecounts_min_map_qual"}.parseInt() }
	if(swParam.hasKey("featurecounts_count_junction")) { countJunctionFlag = swParam{"featurecounts_count_junction"}.parseInt() }
	if(swParam.hasKey("featurecounts_count_primary")) { countPrimaryFlag = swParam{"featurecounts_count_primary"}.parseInt() }
	if(swParam.hasKey("featurecounts_count_properpair")) { countProperpairFlag = swParam{"featurecounts_count_properpair"}.parseInt() }
	if(swParam.hasKey("featurecounts_paired_end_fragment")) { pairedEndFragmentFlag = swParam{"featurecounts_paired_end_fragment"}.parseInt() }

	if(refParam.hasKey("grch38_genome")) { refGenome = refParam{"grch38_genome"} }
	if(refParam.hasKey("grch38_anno_gtf")) { annoGtf = refParam{"grch38_anno_gtf"} }

	if(modFlag == 1) {
		if(modsource.length() > 0) { modload = ". $modsource; " }
		for(string mod : modlist) { modload += "module load $mod; " }
	} else { modload = '' }
	
	// memory = getmem(memory * G, threads)

	infileTotal = infiles.size()
	// maxMemPerThread = memory / threads
	inputString = infiles.join(' ')

	// prepare params
	paramString += ' -s ' + rnaseqLibStrand + ' -F ' + annoFormat
	paramString += ' -t ' + annoFeature + ' -g ' + annoAttribute
	paramString += ' -Q ' + minMapQual 
	if(countJunctionFlag == 1) { paramString += ' -J ' }
	if(countPrimaryFlag == 1) { paramString += ' --primary ' }
	// PE reads only
	if(paired == 1) {
		if(countProperpairFlag == 1) { paramString += ' -B -C' }
		if(pairedEndFragmentFlag == 1) { paramString += ' -p ' }
	}
	
	// println info(modname, "START | sm=$sample | util=$util | bamTotal=$infileTotal")

	// run start
	if(! outdir.isDir()) { outdir.mkdir() }
	if(! logdir.isDir()) { logdir.mkdir() }	
	if(! tmpdir.isDir()) { tmpdir.mkdir() }

	// run featurecounts 
	if(outfile <- infile) { 
		println info(modname, " task=run_featurecounts | run=1")
		tid = task(cpus := threads, mem := memory) {
			sys echo "$sample::featurecounts"
			sys $modload
			sys $exe $paramString -a $annoGtf -T $threads -G $refGenome -o $outfile $infile 2> $logdir/$logfile
			sys sleep $safeSleep
		}

		tids.push(tid)
	}
	else {
		println info(modname, " task=run_featurecounts | run=0")
	}

	tids.push(tid)

	// println info(modname, "END | sm=$sample | util=$util | bamTotal=$infileTotal")
	
	return tids
}

