#!/usr/bin/env bds

void Run_PreProcessing(string sample, string projdir, string sampleConfig, string flagConfig, string refConfig, string softwareConfig) {

	println info("RNAseq::02_Run_PreProcessing", "START | sm=$sample")

	//------------- INCLUDE -------------//

	include "../lib/print.bds"
	//include "lib/header.bds"
	include "../lib/rgmap.bds"
	include "../lib/trimmomatic.bds"

	//sys source "config/module.rc"

	//------------- MAIN -------------//

	// initialize
	string{} smParam = config(sampleConfig)
	string{} rgParam
	string{} rgFailMap
	string[] rgConfigs
	string[] rgFail
	string[] flags
	string[] pids
	string infile
	string outfile
	string resultdir
	string outdir
	string logfile
	string logdir
	string readgroup
	int paired = 0
	int forceIn = 0

	// assign values
	if(smParam.hasKey("rg_configs")) { rgConfigs = smParam{"rg_configs"}.split(",") }
	else { 
		error info("RNAseq::02_Run_PreProcessing", "sm=$sample | rg_configs does not exist in the config file! config = $sampleConfig") 
	}
	if(smParam.hasKey("sample_result_dir")) { resultdir = smParam{"sample_result_dir"} }
	if(smParam.hasKey("sample_log_dir")) { logdir = smParam{"sample_log_dir"} }
	if(smParam.hasKey("qc_flagfile")) { rgFailMap = BuildRGmap(smParam{"qc_flagfile"}, "RG", "FAIL") }
	if(smParam.hasKey("force_include")) { forceIn = smParam{"force_include"}.parseInt() }

	if(! resultdir.exists()) { resultdir.mkdir() }
	outdir = resultdir + "/clean_reads"
	if(! outdir.isDir()) { outdir.mkdir() }

	// print "====" 
	// printMap(rgFailMap)

	// run start
	for (string cfg : rgConfigs) {
		rgParam = config(cfg)
		readgroup = ""
		infile = ""
		outfile = ""
		paired = 0

		if(rgParam.hasKey("readgroup")) { readgroup = rgParam{"readgroup"} }
		if(rgParam.hasKey("seqfiles")) { infile = rgParam{"seqfiles"} }
		if(rgParam.hasKey("paired")) { paired = rgParam{"paired"}.parseInt() }

		// check whethe this rg passes QC
		if(forceIn == 0) {
			if((readgroup == "") || (rgFailMap.hasKey("$readgroup"))) { 
				println info("RNAseq::02_Run_PreProcessing", "sm=$sample | rg=$readgroup | QC failed! Skip") 
				continue
			}
		}
		
		if(rgParam.hasKey("trimmomatic_files")) { outfile = rgParam{"trimmomatic_files"} }
		logfile = readgroup + ".trimmomatic.log"
		pid := par trimmomatic(sample, readgroup, infile, outfile, outdir, logfile, logdir, softwareConfig)
		pids.push(pid)
	}

	wait pids

	// run end
	println info("RNAseq::02_Run_PreProcessing", "END | sm=$sample")

}
