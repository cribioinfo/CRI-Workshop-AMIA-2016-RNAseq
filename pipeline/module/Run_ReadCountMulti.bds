#!/usr/bin/env bds

string[] Run_ReadCountMulti(string project, string aligner, string caller, string projdir, string multiConfig, string flagConfig, string refConfig, string softwareConfig, string ivcConfig) {

	println info("RNAseq::05_Run_ReadCountMulti", "START | proj=$project | aln=$aligner | clr=$caller")


	//------------- INCLUDE -------------//

	include "../lib/print.bds"
	//include "../lib/header.bds"
	include "../lib/samtools.bds"
	include "../lib/picard.bds"
	include "../lib/bedtools.bds"

	//sys source "config/module.rc"

	//------------- MAIN -------------//

	// initialize
	string{} multiParam = config(multiConfig)
	string{} flagParam = config(flagConfig)
	string{} refParam = config(refConfig)
	string{} swParam = config(softwareConfig)
	string[] tids
	string[] tid
	string[] binfiles
	string varfile = ""
	string bedfile
	string outfile
	string resultdir
	string outdir
	string logdir
	string logfile
	string targetfile
	string callocifile
	string target
	string chrom
	string refGenome
	string binlist
	int runGatkCallableLoci = 0
	int runTarget = 0
	int splitByBin = 0

	// assign values
	if(multiParam.hasKey("multisample_result_dir")) { resultdir = multiParam{"multisample_result_dir"} }
	if(multiParam.hasKey("multisample_log_dir")) { logdir = multiParam{"multisample_log_dir"} }
	if(caller != "MergeCollableLoci" ) { 
		if(multiParam.hasKey(aligner + "_" + caller + "_varfile")) { varfile = multiParam{aligner + "_" + caller + "_varfile"} }
	}
	if(multiParam.hasKey(aligner + "_loci_bedfiles")) { bedfile = multiParam{aligner + "_loci_bedfiles"} }

	if(flagParam.hasKey("run_gatk_callableloci")) { runGatkCallableLoci = flagParam{"run_gatk_callableloci"}.parseInt() }
	if(flagParam.hasKey("run_target")) { runTarget = flagParam{"run_target"}.parseInt() }
	if(refParam.hasKey("hg19_genome")) { refGenome = refParam{"hg19_genome"} }
	if(swParam.hasKey("main_split_by_bin")) { splitByBin = swParam{"main_split_by_bin"}.parseInt() }

	outdir = resultdir + "/variant_calls"

	if(! resultdir.exists()) { resultdir.mkdir() }
	if(! outdir.exists()) { outdir.mkdir() }
	if((caller != "MergeCollableLoci") && (! "$outdir/$caller".exists())) { "$outdir/$caller".mkdir() }


	// First decide target file...
	if(runGatkCallableLoci == 1) {
		util := "merge"
		logfile = project + "." + aligner + ".bedtools_" + util + ".log"
		if(multiParam.hasKey(aligner + "_loci_merged")) { target = multiParam{aligner + "_loci_merged"} }

		if(caller == "MergeCollableLoci") {
			
			// for each aligner (but for all callers), merge all callable regions into one united target file...
			tid = bedtools(project, util, refGenome, targetfile, bedfile, target, outdir, logfile, logdir, softwareConfig)
			
			wait tid 
		}
	}
	else if ((runTarget == 1) && (targetfile.length() > 0)) {
		target = targetfile
	}

	if(splitByBin == 1) {

		binlist = target.replace(".bed",".bins.list")

		// split by bin before variant calling...
		if(caller == "MergeCollableLoci") {
			logfile = project + "." + aligner + ".splitbybin.log"
			outfileNew := target.replace(".bed",".bins.txt")		
			tidsplit := splitbybin(project, outdir + "/targets", binlist, target, outfileNew, outdir, logfile, logdir, softwareConfig)

			// println "binlist = $binlist"
			// printArray(binfiles)

			wait tidsplit
		}

		binfiles = binlist.readLines()
	}

	// if(splitByBin) { printArray(binfiles) }
	// println "Run_ReadCountMulti: \n-- $project: $caller \n-- splitByBin = $splitByBin \n-- target = $target"

	// run start 
	if(caller != "MergeCollableLoci") {
		// println "varfile = $varfile"
		outfile = outdir + "/" + caller + "/" + varfile.split("/").pop().swapExt(".flt.vcf",".vcf")

		if((splitByBin == 1) && (caller != "ivc")) {
			string[] pids 
			string[] infiles

			// run bins only if the outfile is older or absent
			inlist := AssignInput(aligner, caller, multiConfig)
			// printArray(inlist)
			// println "outfile = $outfile"
			if((inlist.size() > 0) && (outfile <- inlist)) {
				println info("RNAseq::05_Run_ReadCountMulti", "task=callByBin | proj=$project | aln=$aligner | clr=$caller | run=1")

				logdirNew := logdir + "/" + caller + "_split"	
				if(! "$outdir/$caller/bins".exists()) { "$outdir/$caller/bins".mkdir() }		
				for(string binfile : binfiles){
					array := binfile.split("/").pop().swapExt(".bed","").replace(".","!").split("!")
					bin := array.pop()
					bin = array.pop() + "." + bin
					// println "bin = $bin"

					// call variant in each bin
					outdirNew := outdir + "/" + caller + "/bins/" + bin
					outfileNew := outdirNew + "/" + varfile.split("/").pop().swapExt(".flt.vcf",".$bin.vcf")
					logfile = project + "." + aligner + "." + caller + "." + bin + ".log"
					infiles.push(outfileNew)
					pid := par ReadCountMulti(project, aligner, caller, chrom, outdir + "/" + caller + "/tmp", binfile, outfileNew, outdirNew, logfile, logdirNew, multiConfig, flagConfig, refConfig, softwareConfig, ivcConfig)
					pids.push(pid)
				}

				wait pids

				// merge variants from each bin 
				// outfile = outdir + "/" + caller + "/" + varfile.split("/").pop().swapExt(".flt.vcf",".vcf")
				logfile = project + "." + aligner + "." + caller + ".mergebybin.log"
				tids += gatk(project, "VarConcat", caller, chrom, outdir + "/" + caller + "/tmp", target, infiles.join(","), outfile, outdir + "/" + caller, logfile, logdirNew, softwareConfig, refConfig)
			}
			else {
				println info("RNAseq::05_Run_ReadCountMulti", "task=callByBin | proj=$project | aln=$aligner | clr=$caller | run=0")
			}
		}
		else {
			// call variants with one target file
			// outfile = outdir + "/" + caller + "/" + varfile.split("/").pop().swapExt(".flt.vcf",".vcf")
			logfile = project + "." + aligner + "." + caller + ".log"
			tids += ReadCountMulti(project, aligner, caller, chrom, outdir + "/" + caller + "/tmp", target, outfile, outdir + "/" + caller, logfile, logdir, multiConfig, flagConfig, refConfig, softwareConfig, ivcConfig)
		}

		wait tids 

		// filter (merged) variants
		logfileNew := project + "." + aligner + "." + caller + ".variantFlt.log"
		tid = gatk(project, "VarFlt", caller, chrom, outdir + "/tmp", target, outfile, varfile, outdir, logfileNew, logdir, softwareConfig, refConfig)

		tids += tid
			
	}

	wait

	// run end
	println info("RNAseq::05_Run_ReadCountMulti", "END | proj=$project | aln=$aligner | clr=$caller")

	return tids
}


//------------- FUNCTION -------------//

// Choose input files based on caller
string[] AssignInput(string aligner, string caller, string multiConfig) {

	// initialize
	string{} multiParam = config(multiConfig)
	string[] inlist 

	// assign values
	if(((caller == "mpileup") || (caller == "freebayes") || (caller == "platypus")) && (multiParam.hasKey(aligner + "_bamfiles"))) { 
		inlist = multiParam{aligner + "_bamfiles"}.split(",")
	}
	else if(((caller == "gatkhc") || (caller == "gatkug")) && (multiParam.hasKey(aligner + "_gatkhc_gvcffiles"))) { 
		inlist = multiParam{aligner + "_gatkhc_gvcffiles"}.split(",")
	}
	else if((caller == "ivc") && (multiParam.hasKey(aligner + "_ivc_vcffiles"))) {
		inlist = multiParam{aligner + "_ivc_vcffiles"}.split(",")
	}

	return inlist
}

string[] ReadCountMulti(string project, string aligner, string caller, string chrom, string tmpdir, string target, string outfile, string outdir, string logfile, string logdir,string multiConfig, string flagConfig, string refConfig, string softwareConfig, string ivcConfig) {

	// initialize
	string{} multiParam = config(multiConfig)
	string[] tids
	string[] tid
	string varfile
	string bamfile
	string gvcffile
	string vcffile
	string chrom

	// assign values
	if(caller != "MergeCollableLoci" ) { 
		if(multiParam.hasKey(aligner + "_" + caller + "_varfile")) { varfile = multiParam{aligner + "_" + caller + "_varfile"} }
	}
	if(multiParam.hasKey(aligner + "_bamfiles")) { bamfile = multiParam{aligner + "_bamfiles"} }
	if(multiParam.hasKey(aligner + "_gatkhc_gvcffiles")) { gvcffile = multiParam{aligner + "_gatkhc_gvcffiles"} }
	if(multiParam.hasKey(aligner + "_ivc_vcffiles")) { vcffile = multiParam{aligner + "_ivc_vcffiles"} }

	// run GATK 
	if(caller == "gatkhc") {

		tid = gatk(project, "VarCall", caller, chrom, tmpdir, target, gvcffile, outfile, outdir, logfile, logdir, softwareConfig, refConfig)

		tids += tid
	}
	else if(caller == "gatkug") {

		tid = gatk(project, "VarCall", caller, chrom, tmpdir, target, bamfile, outfile, outdir, logfile, logdir, softwareConfig, refConfig)

		tids += tid
	}
	else { 
		// outfile := outdir + "/" + caller + "/" + varfile.split("/").pop().swapExt(".flt.vcf",".vcf")
		// logfile = project + "." + aligner + "." + caller + ".log"
		// println "Run $caller on $project\noutdir = $outdir"

		// run IVC 
		if(caller == "ivc") {
			tid = ivc(project, chrom, tmpdir, target, vcffile, outfile, outdir, logfile, logdir, softwareConfig, refConfig, ivcConfig)

			tids += tid
		}
		// run mpileup
		else if(caller == "mpileup") {
			tid = mpileup(project, chrom, tmpdir, target, bamfile, outfile, outdir, logfile, logdir, softwareConfig, refConfig)

			tids += tid
		}	
		// run freebayes
		else if(caller == "freebayes") {
			tid = freebayes(project, chrom, tmpdir, target, bamfile, outfile, outdir, logfile, logdir, softwareConfig, refConfig)

			tids += tid
		}	
		// run platypus
		else if(caller == "platypus") {
			tid = platypus(project, chrom, tmpdir, target, bamfile, outfile, outdir, logfile, logdir, softwareConfig, refConfig)

			tids += tid
		}
			
	}	

	return tids
}